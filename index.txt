Plan de Pr√°ctica Semanal (Coding Interviews)
üîπ Semana 1 ‚Äì Fundamentos (Arrays, Strings, Hashing)

Objetivo: Agarrar soltura con problemas b√°sicos.
Temas: Hashing, Two Pointers, Sliding Window, Kadane.

D√≠a 1:

Two Sum (HashMap).

Primer car√°cter √∫nico en string.

D√≠a 2:

‚òëÔ∏è‚úîÔ∏è Verificar si string es pal√≠ndromo (Two Pointers).

Merge de dos arrays ordenados.

D√≠a 3:

Subarray de longitud k con suma m√°xima (Sliding Window).

Substring m√°s largo sin repetir caracteres.

D√≠a 4:

Detectar anagramas en string (Sliding Window).

Subarray con suma = 0 (Hashing).

D√≠a 5:

Kadane (m√°xima suma subarray).

Versi√≥n m√≠nima suma subarray.

D√≠a 6-7 (Review):

Repite los problemas y agrega variantes.

Haz 1 mock test en LeetCode "Easy" tag.

üîπ Semana 2 ‚Äì B√∫squedas y Divide & Conquer

Objetivo: Dominar b√∫squedas y recursi√≥n.
Temas: Binary Search, Divide & Conquer (MergeSort, QuickSort, Peak Element).

D√≠a 8:

Binary Search cl√°sico.

Buscar n√∫mero en array rotado.

D√≠a 9:

Buscar sqrt(x) con binary search.

Problema de "Capacity to Ship Packages within D Days".

D√≠a 10:

Implementar Merge Sort.

Contar inversiones en un array (usando MergeSort).

D√≠a 11:

QuickSort.

Quickselect (k-th largest element).

D√≠a 12:

Peak Element (binary search).

Rotated Sorted Array ‚Äì Find Minimum.

D√≠a 13-14 (Review):

Repasa binary search + sorting.

Mock test en LeetCode "Binary Search" + "Sorting".

üîπ Semana 3 ‚Äì Grafos y Greedy

Objetivo: Meter grafos y greedy que son frecuentes en entrevistas.
Temas: BFS, DFS, Union-Find, Greedy, Heap.

D√≠a 15:

BFS en grid (shortest path con obst√°culos).

DFS para contar islas.

D√≠a 16:

Detectar ciclos en grafo dirigido (DFS).

Componentes conectadas (DFS/BFS).

D√≠a 17:

Interval Scheduling (Greedy).

Huffman Coding (Greedy + Heap).

D√≠a 18:

Minimum Spanning Tree con Kruskal (Union-Find).

Detectar ciclos en grafo no dirigido (Union-Find).

D√≠a 19:

K-th largest element con Heap.

Top-k elementos m√°s frecuentes (Heap + HashMap).

D√≠a 20-21 (Review):

Repasa grafos + greedy + heaps.

Mock test en LeetCode "Graph" + "Heap".

üîπ Semana 4 ‚Äì Hardcore (DP, Backtracking, String Matching)

Objetivo: Cerrar con lo m√°s temido y exigente en entrevistas top.
Temas: Dynamic Programming, Backtracking, Dijkstra, KMP, Trie.

D√≠a 22:

DP: Knapsack b√°sico.

DP: Longest Increasing Subsequence.

D√≠a 23:

DP: Minimum Path Sum en grid.

DP: Edit Distance (levenshtein).

D√≠a 24:

Backtracking: N-Queens.

Backtracking: Combinaciones que suman a target.

D√≠a 25:

Backtracking: Permutaciones de array con duplicados.

Sudoku Solver (Backtracking + pruning).

D√≠a 26:

Dijkstra‚Äôs Algorithm.

Network Delay Time (Dijkstra).

D√≠a 27:

KMP (string matching).

Trie b√°sico (insert + search).

D√≠a 28 (Final Review):

Proyecto final: Autocomplete system con Trie + Heap.

Mock test "Mixed Hard" en LeetCode.